$#include "sequentity/CSequentity.h"



namespace Sequentity
{

struct Track {
    std::string label;

    ImVec4 color;

    bool solo;
    bool mute;

    //std::unordered_map<EventType, Channel> channels;
    
    // Internal
    //bool _notsoloed;
};


struct Channel {
    std::string label;

    ImVec4 color;

	bool can_overlap;
	
	
	bool is_active;
	
	int type;
};

struct Event {
    int time;
    int length;

    ImVec4 color;

    // Map your custom data here, along with an optional type
    int type;

    /* Whether or not to consider this event */
    bool enabled;
	
    /* Extend or reduce the length of an event */
    float scale;
	
	bool canmove;

	int move_min;
	int move_max;

	// Visuals, animation
	//float height;
	//float thickness;
};

}




class CSequentity
{
public:

	CSequentity();

	virtual ~CSequentity();

	void onGUI();

	Sequentity::Track* addTrack();

	Sequentity::Channel* addChannel(Sequentity::Track* track, int type);

	Sequentity::Event* addEvent(Sequentity::Channel* channel);


	void removEvent(Sequentity::Event* event);
	
	
	void clearEvent(Sequentity::Channel* channel);

	void clearChanel(Sequentity::Track* track);

	void clearTrack();


	std::vector<Sequentity::Track*> getAllTrack();

	std::vector<Sequentity::Channel*> getAllChannel(Sequentity::Track* track);

	std::vector<Sequentity::Event*> getAllEvent(Sequentity::Channel* channel);
	
	
	
	void setRange(int min, int max);

	int getMax();

	int getMin();

	void setCurrentTime(int current_time);

	int getCurrentTime();
	
	
	/// LuaFunctionBond
	void registerLuaHandle(std::string name, LUA_FUNCTION handle);

	void unregisterLuaHandle(std::string name);

	void clearLuaHandle();
};
