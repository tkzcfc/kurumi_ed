$#include "lua-modules/tiny-process/CProcess.h"



class CProcess
{
public:

	CProcess();

	~CProcess();

	void start(const char* command, const char* path);

	///Get the process id of the started process.
	unsigned long get_id();

	///Wait until process is finished, and return exit status.
	int get_exit_status();

	///If process is finished, returns true and sets the exit status. Returns false otherwise.
	bool try_get_exit_status(int &exit_status);

	///Write to stdin.
	bool write(const char *bytes, int n);

	///Write to stdin. Convenience function using write(const char *, size_t).
	bool write(std::string data);

	///Close stdin. If the process takes parameters from stdin, use this to notify that all parameters have been sent.
	void close_stdin();

	///Kill the process. force=true is only supported on Unix-like systems.
	void kill(bool force = false);




	/// LuaFunctionBond
	void registerLuaHandle(std::string name, LUA_FUNCTION handle);

	void unregisterLuaHandle(std::string name);

	void clearLuaHandle();
};
